/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum DamageSeverity {
  MINOR = "MINOR",
  MODERATE = "MODERATE",
  SEVERE = "SEVERE",
  TOTAL_LOSS = "TOTAL_LOSS",
}

export enum DamageType {
  SCRATCH = "SCRATCH",
  DENT = "DENT",
  CRACK = "CRACK",
  BROKEN_PART = "BROKEN_PART",
  RUST = "RUST",
  PAINT_DAMAGE = "PAINT_DAMAGE",
  STRUCTURAL_DAMAGE = "STRUCTURAL_DAMAGE",
  OTHER = "OTHER",
}

export enum VehicleType {
  CAR = "CAR",
  TRUCK = "TRUCK",
  MOTORCYCLE = "MOTORCYCLE",
  VAN = "VAN",
  SUV = "SUV",
  OTHER = "OTHER",
}

export interface VehicleAnalysis {
  vehicle_type: VehicleType
  make?: string | null
  model?: string | null
  year?: number | null
  color?: string | null
  license_plate?: string | null
  damages: VehicleDamage[]
  overall_condition: string
  estimated_total_cost?: string | null
  recommendations: string[]
  confidence_score?: number | null
  
}

export interface VehicleDamage {
  type: DamageType
  severity: DamageSeverity
  location: string
  description: string
  estimated_cost_range?: string | null
  
}
